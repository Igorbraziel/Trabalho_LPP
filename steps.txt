Primeira parte (Compilador):

--A primeira parte do trabalho é criar um compilador que traduza as instruções dos métodos e da
função principal para instruções de uma máquina de pilha. O formato de saída será parecido com
BOOL a menos do corpo dos métodos e da função principal.

-- O seu compilador deve receber o nome de um arquivo BOOL e o nome de um arquivo de saída. O
compilador então lê e compila o corpo dos métodos e da main do arquivo BOOL (mantendo o
restante das informações inalteradas) e salva o resultado no outro arquivo. Por exemplo:
java BoolCompiler file.bool file.boolc.

--


Segunda parte (Interpretador):

--O segundo programa a ser desenvolvido deve ser o interpretador BOOL, que terá como entrada um
arquivo BOOL compilado e deve executar o programa, começando da função main. Por exemplo:
java BoolInterpreter file.boolc
O interpretador deve ser responsável por criar um representação para as classes, objetos, métodos,
etc., de tal forma que o programa funcione como esperado.

--O interpretador deverá ser implementado como uma máquina de pilha cujas as instruções serão
mostradas adiante. Isso significa que a execução das instruções supõe uma pilha onde os valores
intermediários serão armazenados, por exemplo, a soma espera que os dois valores estejam nesta
pilha. Além disso, a pilha serve como auxílio na passagem de parâmetros para chamada de métodos;
por exemplo, para a chamada de um métodos, os valores de entrada da chamada do método serão
colocados na pilha e depois transferidos para os parâmetros.
Os resultados das operações (soma ou chamada de método) também voltam para a pilha.

--A linguagem BOOL só tem comando para criar objetos, assim a destruição do objeto deve ser
realizada por um coletor de lixo quando o objeto que não estiver mais sendo utilizado. A tarefa de
coletar os objetos é do interpretador.
No trabalho, a cada 5 instruções executadas, a rotina de coleta de lixo do interpretador deve
ser chamada. Deve-se implementar uma versão simples de coletor mark-and-sweep como descrito à
seguir.
Essa técnica consiste em dividir a rotina de coleta de lixo em duas fase, a de marcação
(mark) e depois de coleta (sweep). Quando a rotina de coleta executar, primeiro ela vai marcar os
objetos de uma cor e , ao final, os objetos que não estiverem sido marcados na na cor em questão
serão apagados.
Na primeira fase de marcação é utilizada, por exemplo, a cor vermelha. A rotina vai passar
pela pilha, parâmetros, variáveis, atributos, etc., verificando se eles são uma referência para algum
objeto. Se for, o objeto é então marcado de vermelho. Ao final da fase de marcação, os objetos que
não estiverem marcados de vermelho são coletados.
Na próxima vez que a rotina de coleta executar, ela irá utilizar a cor preta. Da mesma forma,
a rotina passa pela pilha, parâmetros, variáveis, atributos, etc., marcando os objetos como preto. Ao
final, os objetos que não estiverem marcados de preto, são coletados.
O processo continua indefinidamente, sempre alternando as cores vermelha e preta.
Apenas uma ressalva é feita na criação dos objetos. Para simplificar, quando um objeto é
criado com “new”, ele é marcado como cinza. Isso evita em saber qual é a cor da vez. Note que se
ao final da fase de marcação, se o objeto ainda estiver como cinza, ele é coletado. Apenas objetos
marcados com a cor da vez (preto ou vermelho) não são coletados.
